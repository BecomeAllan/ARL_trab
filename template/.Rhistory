summary(mod_init)
predict(mod_init)
predict(mod_init)
dados_train%>% plot_ly(
x=~dados_train$X6, y=~dados_train$X11, z=~dados_train$X10,
type="scatter3d", mode="markers", color=~dados_train$X8)  %>%
add_trace(x=~dados_train$X6,y=~dados_train$X11, z=~predict(mod_init)
,
mode="markers", type="surface")
dados_train%>% plot_ly(
x=~dados_train$X6, y=~dados_train$X11, z=~dados_train$X10,
type="scatter3d", mode="markers", color=~dados_train$X8)  %>%
add_trace(x=~dados_train$X6,y=~dados_train$X11, z=~predict(mod_init), type="surface")
dados_train%>% plot_ly(x=~dados_train$X6,y=~dados_train$X11, z=~predict(mod_init), type="surface")%>%
add_trace(
x=~dados_train$X6, y=~dados_train$X11, z=~dados_train$X10,
type="scatter3d", mode="markers", color=~dados_train$X8)  %>%
predict(mod_init)
dados_train%>% plot_ly(x=~dados_train$X6,y=~dados_train$X11, z=~predict(mod_init), type="surface")%>%
add_trace(
x=~dados_train$X6, y=~dados_train$X11, z=~dados_train$X10,
type="scatter3d", mode="markers", color=~dados_train$X8)
library(scatterplot3d)
ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()
mod_init <- lm(X10 ~ X6+X11+X8 , data=dados_train)
mod_init
predict(mod_init)
predict(mod_init)
ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_point(x=dados_train$X6,y=predict(mod_init))
ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_point(x=dados_train$X6,y=predict(mod_init), color='black')
ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth(method='lm', formula= dados_train$10~dados_train$X6)
ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth(method='lm', formula= dados_train$X10~dados_train$X6)
dados_train$X10
dados_train$X6
ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth(method='lm', formula= dados_train$X10~dados_train$X6)
coef(mod_init)
coef(mod_init)[["(Intercept)"]]
coef(mod_init)
mod_init <- lm(X10 ~ X6+X11+X8 , data=dados_train)
summary(mod_init)
lm(X10 ~ X6+X11+X8 , data=dados_train)
lm(dados_train$X10 ~ dados_train$X6+dados_train$X11+dados_train$X8)
dados_train
dados_train$X8
lm(X10 ~ X6+X11+X8 , data=)
dados_train
lm(X10 ~ X6+X11+X8 , data=dados_train)
ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_abline(intercept =coef(mod_init)[["(Intercept)"]],
slope = coef(mod_init)[['X6']])
ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth(aes(disp,mpg), method=lm, se=FALSE)
ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth method=lm, se=FALSE)
ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)
require(gridExtra)
ggplot(data = dados_train, aes(x=X11, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)
g0<-ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)
g1<-ggplot(data = dados_train, aes(x=X11, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)
grid.arrange(g0, g1, ncol=2)
g0<-ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()
g1<-ggplot(data = dados_train, aes(x=X11, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()
grid.arrange(g0, g1, ncol=2)
summaryaov(X10 ~ X6+X11+X8 , data=dados_train)
summary.aov(X10 ~ X6+X11+X8 , data=dados_train)
summary(aov(X10 ~ X6+X11+X8 , data=dados_train))
# Teste de
mod_init <-  lm(X10 ~ X6+X11+X8 , data=dados_train)
mod_init
anova(mod_init)
summary(mod_init)$adj.r.squared
# Teste Linear geral
anova(mod_init)
datax
datax$X8
count(datax$X8)
table(datax$X8)
g0<-ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()+guides(color="none")
g1<-ggplot(data = dados_train, aes(x=X11, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()
grid.arrange(g0, g1, ncol=2)
library(ggpubr)
ggarrange(g0, g1, ncol=2,common.legend = TRUE, legend="left")
library(ggpubr)
library(ggpubr)
library(ggpubr)
install.packages("ggpubr")
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
install.packages("car")
library(ggpubr)
update.packages(checkBuilt = TRUE)
install.packages("car", dependencies=TRUE)
library(ggpubr)
library(car)
install.packages("car")
library(car)
library(ggpubr)
get_legend(g0)
require(gridExtra)
get_legend(g0)
require(ggpubr)
require(gridExtra)
require(ggplot2)
get_legend(g0)
install.packages("patchwork")
install.packages("patchwork")
library("patchwork")
g0+g1+plot_layout(guides = "collect")
g0+g1/plot_layout(guides = "collect")
(g0+g1)/plot_layout(guides = "collect")
g0+g1+plot_layout(guides = "collect")
g1<-ggplot(data = dados_train, aes(x=X11, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()+ ylab("")
g0+g1+plot_layout(guides = "collect")
?anova
# Teste Linear geral
anova(mod_init)
# Teste Linear geral
anova(mod_init)[[1]]
# Teste Linear geral
anova(mod_init)
# Teste Linear geral
anova(mod_init)[1,2]
# Teste Linear geral
anova(mod_init)
anova(mod_init)[1,1:2]
anova(mod_init)
anova(mod_init)
anv_mod <- anova(mod_init)
tabmodel <- c(sum(anv_mod[1:3,1:2]), sum(anv_mod[1:3,1]))
tabmodel
tabmodel <- c(sum(anv_mod[1:3,1],sum(anv_mod[1:3,1:2]) ))
tabmodel
tabmodel <- c(sum(anv_mod[1:3,1],sum(anv_mod[1:3,1:2]) ))
tabmodel
sum(anv_mod[1:3,1])
tabmodel <- c(sum(anv_mod[1:3,1]),sum(anv_mod[1:3,1:2]) )
mod_init <-  lm(X10 ~ X6+X11+X8 , data=dados_train)
mod_init
?anova
# Teste Linear geral
anv_mod <- anova(mod_init)
res <- anv_mod[4,1:2]
tabmodel <- c(sum(anv_mod[1:3,1]),sum(anv_mod[1:3,1:2]) )
summary(mod_init)$adj.r.squared
tabmodel
anv_mod
qnorm(0)
pnorm(0)
f_est <- (tabmodel[1]/tabmodel[2])/(res[1]/res[2])
tabmodel[1]
res[1]
anv_mod <- anova(mod_init)
tabmodel <- c(sum(anv_mod[1:3,1]),sum(anv_mod[1:3,1:2]) )
1-pf(f_est, tabmodel[1], res[1])
summary(mod_init)$adj.r.squared
f_est
res
res <- vector(anv_mod[4,1:2])
res <- as.vector(anv_mod[4,1:2])
res
res <- c(anv_mod[4,1:2])
res
res <- as.vector(c(anv_mod[4,1:2]))
res
res <- unlist(anv_mod[4,1:2]))
res <- unlist(anv_mod[4,1:2])
res
tabmodel <- c(sum(anv_mod[1:3,1]),sum(anv_mod[1:3,1:2]) )
tabmodel
f_est
f_est <- (tabmodel[2]/tabmodel[1])/(res[2]/res[1])
f_est
1-pf(f_est, tabmodel[1], res[1])
f_est
tabmodel[1]
res[1]
tabmodel[1]
tabmodel[2]
res[2]
res[1]
1-pf(f_est, tabmodel[1], res[1])
summary(mod_init)$adj.r.squared
datax %>% select_if(is.numeric)
library(dplyr)
datax %>% select_if(is.numeric)
datax_ajusdet <-datax %>% select_if(is.numeric)
datax_ajusdet
apply(datax_ajusdet, 1, mean)
datax_ajusdet-apply(datax_ajusdet, 1, mean)
datax_ajusdet[1:2,1:2]
datax_ajusdet[1:2,1:2] - c(1,2)
datax_ajusdet[1:2,1:2] - c(6,2)
datax_ajusdet[1:2,1:2] - vector(6,2)
datax_ajusdet[1:2,1:2] - vector(c(6,2))
datax_ajusdet[1:2,1:2] - matrix(c(6,2))
datax_ajusdet[1:2,1:2]
datax_ajusdet[1:2,1:2] - c(7,0)
datax_ajusdet[1:2,1:2] - matrix(c(7,0),2)
matrix(c(7,0),2)
matrix(c(7,0),1)
datax_ajusdet[1:2,1:2] - matrix(c(7,0),1)
datax_ajusdet
scale(1:5)
scale(datax_ajusdet)
datax_ajusdet <-datax %>% select_if(is.numeric) %>% scale()
datax_ajusdet
datax_ajusdet[1]
datax_ajusdet[,1]
sum(datax_ajusdet[,1])
datax_ajusdet[,1]
mean(datax_ajusdet[,1])
colMeans(datax_ajusdet)
apply(datax_ajusdet, 2, sd)
colnames(datax_ajusdet)
datax[,colnames(datax_ajusdet)] <- datax_ajusdet
datax
dados_train <- datax[sample(nrow(datax), 57, replace = F),] %>% data.frame()
dados_valid<- anti_join(datax, dados_train, by="ID") %>% data.frame()
# inbalanced data
table(datax$X8)
boxplot(dados_train$X10~dados_train$X8)
mod_init <-  lm(X10 ~ X6+X11+X8 , data=dados_train)
# Teste Linear geral
anv_mod <- anova(mod_init)
res <- unlist(anv_mod[4,1:2])
tabmodel <- c(sum(anv_mod[1:3,1]),sum(anv_mod[1:3,1:2]) )
f_est <- (tabmodel[2]/tabmodel[1])/(res[2]/res[1])
1-pf(f_est, tabmodel[1], res[1])
summary(mod_init)$adj.r.squared
anova(mod_init)
anova(mod_init)
anova(mod_init)
library(plotly)
require(gridExtra)
require(ggplot2)
library("patchwork")
g0<-ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()
g1<-ggplot(data = dados_train, aes(x=X11, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()+ ylab("")
g0+g1+plot_layout(guides = "collect")
ggarrange(g0, g1, ncol=2,common.legend = TRUE, legend="left")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
datax <- read_excel(path ='../Dados/Dados_trabalho_20212.xlsx')
datax <- na.omit(datax)
datax$X7 <- as.factor(datax$X7)
datax$X8 <- as.factor(datax$X8)
datax$ID <- as.factor(datax$ID)
datax_ajusdet <-datax %>% select_if(is.numeric) %>% scale()
datax[,colnames(datax_ajusdet)] <- datax_ajusdet
# colMeans(datax_ajusdet)
# apply(datax_ajusdet, 2, sd)
names(data) <- c('Número de Identificação', 'Duração da Internação', 'Idade', 'Risco de Infecção', 'Proporção de Culturas de Rotina', 'Proporção de Raio-X de Tórax de Rotina', 'Número de leitos', 'Filiação a Escola de Medicina', 'Região', 'Média diária de pacientes', 'Número de enfermeiro(s)', 'Facilidades e serviços disponíveis')
c('Número de Identificação', 'Duração da Internação', 'Idade', 'Risco de Infecção', 'Proporção de Culturas de Rotina', 'Proporção de Raio-X de Tórax de Rotina', 'Número de leitos', 'Filiação a Escola de Medicina', 'Região', 'Média diária de pacientes', 'Número de enfermeiro(s)', 'Facilidades e serviços disponíveis')
data
data
names(data)
data <-datax
names(data) <- c('Número de Identificação', 'Duração da Internação', 'Idade', 'Risco de Infecção', 'Proporção de Culturas de Rotina', 'Proporção de Raio-X de Tórax de Rotina', 'Número de leitos', 'Filiação a Escola de Medicina', 'Região', 'Média diária de pacientes', 'Número de enfermeiro(s)', 'Facilidades e serviços disponíveis')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
datax <- read_excel(path ='../Dados/Dados_trabalho_20212.xlsx')
datax <- na.omit(datax)
datax$X7 <- as.factor(datax$X7)
datax$X8 <- as.factor(datax$X8)
datax$ID <- as.factor(datax$ID)
datax_ajusdet <-datax %>% select_if(is.numeric) %>% scale()
datax[,colnames(datax_ajusdet)] <- datax_ajusdet
# colMeans(datax_ajusdet)
# apply(datax_ajusdet, 2, sd)
data <-datax
names(data) <- c('Número de Identificação', 'Duração da Internação', 'Idade', 'Risco de Infecção', 'Proporção de Culturas de Rotina', 'Proporção de Raio-X de Tórax de Rotina', 'Número de leitos', 'Filiação a Escola de Medicina', 'Região', 'Média diária de pacientes', 'Número de enfermeiro(s)', 'Facilidades e serviços disponíveis')
# Tabela de nomes X1: Nome variavel
knitr::kable(cbind(names(data),names(datax)),
caption = 'Descrição dos códigos da tabela com a seguinte indentificação da variável.')
datax2 <-datax  %>%
select(X5,X2,X4,X11)
datax3 <-datax  %>%
select(X1,X3)
datax1 <-datax  %>%
select(X6,X9,X10)
par(mfrow = c(1,3))
boxplot(datax1)
boxplot(datax2)
boxplot(datax3)
library(ggcorrplot)
library(dplyr)
pmat = datax %>% select_if(is.numeric) %>%cor_pmat()
datax %>% select_if(is.numeric) %>% cor(.) %>%
ggcorrplot( type = "lower", p.mat = pmat, hc.order = TRUE,lab = TRUE)
# k = datax %>% select_if(is.numeric) %>% summary()
dados_train <- datax[sample(nrow(datax), 57, replace = F),] %>% data.frame()
dados_valid<- anti_join(datax, dados_train, by="ID") %>% data.frame()
# inbalanced data
table(datax$X8)
boxplot(dados_train$X10~dados_train$X8)
mod_init <-  lm(X10 ~ X6+X11+X8 , data=dados_train)
# Teste Linear geral
anv_mod <- anova(mod_init)
res <- unlist(anv_mod[4,1:2])
tabmodel <- c(sum(anv_mod[1:3,1]),sum(anv_mod[1:3,1:2]) )
f_est <- (tabmodel[2]/tabmodel[1])/(res[2]/res[1])
1-pf(f_est, tabmodel[1], res[1])
summary(mod_init)$adj.r.squared
anova(mod_init)
library(plotly)
require(gridExtra)
require(ggplot2)
library("patchwork")
g0<-ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()
g1<-ggplot(data = dados_train, aes(x=X11, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()+ ylab("")
g0+g1+plot_layout(guides = "collect")
ggarrange(g0, g1, ncol=2,common.legend = TRUE, legend="left")
library(plotly)
require(gridExtra)
require(ggplot2)
library("patchwork")
g0<-ggplot(data = dados_train, aes(x=X6, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()
g1<-ggplot(data = dados_train, aes(x=X11, X10, color = X8))+
geom_point()+
geom_smooth( method=lm, se=FALSE)+theme_bw()+ ylab("")
g0+g1+plot_layout(guides = "collect")
ggarrange(g0, g1, ncol=2,common.legend = TRUE, legend="left")
g0+g1+plot_layout(guides = "collect")
colnames(dados_train)
mod_init <- aov(X10 ~ X6+X8 +X11, data=dados_train)
mod_init <- lm(X10 ~ X6+X11+X8 , data=dados_train)
summary(mod_init)
dados_train%>% plot_ly(x=~dados_train$X6,y=~dados_train$X11, z=~predict(mod_init), type="surface")%>%
add_trace(
x=~dados_train$X6, y=~dados_train$X11, z=~dados_train$X10,
type="scatter3d", mode="markers", color=~dados_train$X8)
predict(mod_init)
set.seed(1234)
n <- 50
x1 <- runif(n); x2 <- runif(n)
x3 <- rnorm(n)>0.5
y <- 2*x1-x2+rnorm(n, sd=0.25)
df <- data.frame(y, x1, x2, x3)
### Estimation of the regression plane
mod <- lm(X10 ~ X6+X8 +X11, data=dados_train)
cf.mod <- coef(mod)
### Calculate z on a grid of x-y values
x1.seq <- seq(min(x1),max(x1),length.out=25)
x2.seq <- seq(min(x2),max(x2),length.out=25)
z <- t(outer(x1.seq, x2.seq, function(x,y) cf.mod[1]+cf.mod[2]*x+cf.mod[3]*y))
#### Draw the plane with "plot_ly" and add points with "add_trace"
cols <- c("#f5cb11", "#b31d83")
cols <- cols[x3+1]
library(plotly)
plot_ly(x=~x1.seq, y=~x2.seq, z=~z,
colors = c("#f5cb11", "#b31d83"),type="surface")
add_trace(data=df, x=x1, y=x2, z=y, mode="markers", type="scatter3d",
marker = list(color=cols, opacity=0.7, symbol=105)) %>%
layout(scene = list(
aspectmode = "manual", aspectratio = list(x=1, y=1, z=1),
xaxis = list(title = "X1", range = c(0,1)),
yaxis = list(title = "X2", range = c(0,1)),
zaxis = list(title = "Y", range = pretty(z)[c(1,8)])))
mod_init <- aov(X10 ~ X6+X8 +X11, data=dados_train)
colnames(dados_train)
mod_init <- aov(X10 ~ X6+X8 +X11, data=dados_train)
mod_init <- lm(X10 ~ X6+X11+X8 , data=dados_train)
summary(mod_init)
dados_train%>% plot_ly(x=~dados_train$X6,y=~dados_train$X11, z=~predict(mod_init), type="surface")%>%
add_trace(
x=~dados_train$X6, y=~dados_train$X11, z=~dados_train$X10,
type="scatter3d", mode="markers", color=~dados_train$X8)
predict(mod_init)
set.seed(1234)
n <- 50
x1 <- runif(n); x2 <- runif(n)
x3 <- rnorm(n)>0.5
y <- 2*x1-x2+rnorm(n, sd=0.25)
df <- data.frame(y, x1, x2, x3)
### Estimation of the regression plane
mod <- lm(X10 ~ X6+X8 +X11, data=dados_train)
cf.mod <- coef(mod)
mod_init <- aov(X10 ~ X6+X8 +X11, data=dados_train)
summary(mod_init)
mod <- lm(log(y) ~ x6 + x11)
colnames(dados_train)
mod_init <- aov(X10 ~ X6+X8 +X11, data=dados_train)
mod_init <- lm(X10 ~ X6+X11+X8 , data=dados_train)
summary(mod_init)
dados_train%>% plot_ly(x=~dados_train$X6,y=~dados_train$X11, z=~predict(mod_init), type="surface")%>%
add_trace(
x=~dados_train$X6, y=~dados_train$X11, z=~dados_train$X10,
type="scatter3d", mode="markers", color=~dados_train$X8)
predict(mod_init)
set.seed(1234)
n <- 50
x1 <- runif(n); x2 <- runif(n)
x3 <- rnorm(n)>0.5
y <- 2*x1-x2+rnorm(n, sd=0.25)
df <- data.frame(y, x1, x2, x3)
### Estimation of the regression plane
mod <- lm(X10 ~ X6+X8 +X11, data=dados_train)
cf.mod <- coef(mod)
mod_init <- aov(X10 ~ X6+X8 +X11, data=dados_train)
summary(mod_init)
# mod <- lm(log(y) ~ x6 + x11)
colnames(dados_train)
mod_init <- aov(X10 ~ X6+X8 +X11, data=dados_train)
summary(mod_init)
mod <- lm(log(y) ~ x6 + x11)
colnames(dados_train)
mod_init <- aov(X10 ~ X6+X8 +X11, data=dados_train)
summary(mod_init)
mod <- lm(log(y) ~ x6 + x11)
plot(predict(mod))
summary(mod)
shapiro.test(mod$residuals)
modmin<-lm(log(y) ~ 1, data=datax)
modcompl<-lm(log(y)~ x1+x2+x3+x4+x5+x6+x8+x9+x11, data=datax)
modcompl<-lm(log(y)~ X1+X2+X3+X4+X5+X6+X8+X9+X11, data=datax)
datax
modcompl<-lm(log(y)~ X1+X2+X3+X4+X5+X6+X8+X9+X11, data=datax)
# teste de ausencia de regresao (significativo)
summary(aov(`Número de enfermeiro(s)` ~ `Número de leitos`+ `Facilidades e serviços disponíveis`, data=data))
modcomp<-lm(`Número de enfermeiro(s)` ~ `Número de leitos` +
I(`Número de leitos`^2)+
`Facilidades e serviços disponíveis`+
I(`Facilidades e serviços disponíveis`^2)+
`Facilidades e serviços disponíveis`*`Número de leitos`
, data = data)
summary(modcomp)
modcomp<-lm(`Número de enfermeiro(s)` ~ `Número de leitos` +
I(`Número de leitos`^2)+
`Facilidades e serviços disponíveis`+
I(`Facilidades e serviços disponíveis`^2)+
`Facilidades e serviços disponíveis`*`Número de leitos`
, data = data)
summary(modcomp)
shapiro.test(residuals(modcomp))
# windows()
par(mfrow = c(2, 2))
plot(fitted(modcomp), residuals(modcomp),xlab="Valores Ajustados",ylab="Resíduos")
abline(h=0)
plot(data$`Número de leitos`, residuals(modcomp),xlab="Número de leitos",ylab="Resíduos")
abline(h=0)
plot(data$`Facilidades e serviços disponíveis`, residuals(modcomp),xlab="Facilidades e serviços disponíveis",ylab="Resíduos")
abline(h=0)
qqnorm(residuals(modcomp), ylab="Resíduos",xlab="Quantis teóricos",main="")
qqline(residuals(modcomp))
# Teste de ausencia de regressao
summary(aov(`Duração da Internação` ~
`Proporção de Raio-X de Tórax de Rotina`+
`Proporção de Culturas de Rotina`,
data = data))
# Regressao
modcomp<-lm(`Duração da Internação` ~
`Proporção de Raio-X de Tórax de Rotina`+
`Proporção de Culturas de Rotina`,
data = data)
summary(modcomp)
# Teste de normalidade
shapiro.test(residuals(modcomp))
# bartlett.test(residuals(modcomp))
# windows()
par(mfrow = c(2, 2))
plot(fitted(modcomp), residuals(modcomp),xlab="Valores Ajustados",ylab="Resíduos")
abline(h=0)
plot(data$`Proporção de Raio-X de Tórax de Rotina`, residuals(modcomp),xlab="Proporção de Raio-X de Tórax de Rotina",ylab="Resíduos")
abline(h=0)
plot(data$`Proporção de Culturas de Rotina`, residuals(modcomp),xlab="Proporção de Culturas de Rotina",ylab="Resíduos")
abline(h=0)
qqnorm(residuals(modcomp), ylab="Resíduos",xlab="Quantis teóricos",main="")
qqline(residuals(modcomp))
